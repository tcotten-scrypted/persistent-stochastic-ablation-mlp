#!/usr/bin/env python3
"""
Generate reproduction test commands for the Persistent Stochastic Ablation study.

This script reads the configurations.txt file and generates Poetry commands
for running all architectural configurations with all ablation modes.
"""

import os
from pathlib import Path

def generate_commands(config_file):
    """Generate Poetry commands for all configurations and ablation modes."""
    try:
        config_path = Path(config_file)
        if not config_path.exists():
            print(f"# Error: File '{config_file}' not found.")
            print(f"# Expected location: {config_path.absolute()}")
            return

        print("# Generated reproduction commands for Persistent Stochastic Ablation study")
        print("# Usage: Copy and paste these commands to run the full experimental suite")
        print("# Note: Each command should be run 10 times for statistical significance")
        print()
        
        with open(config_path, 'r') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue
                if '*' not in line:
                    print(f"# Skipping malformed line {line_num}: {line}")
                    continue

                parts = line.split('*')
                if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():
                    print(f"# Skipping invalid format line {line_num}: {line}")
                    continue

                layers, width = parts
                arch = f"[{layers}*{width}]"
                identifier = f"{layers}x{width}"

                print(f"# Architecture: {arch} ({identifier})")
                
                for mode in ["none", "decay", "dropout", "full", "hidden", "output"]:
                    # Generate Poetry command with proper paths
                    cmd = (
                        f"poetry run train -- --arch \"{arch}\" "
                        f"--ablation-mode {mode} "
                    )
                    
                    # Add mode-specific parameters
                    if mode == "decay":
                        cmd += f"--weight-decay 1e-4 "
                    elif mode == "dropout":
                        cmd += f"--dropout 0.1 "
                    
                    cmd += (
                        f"--meta-loops 100 "
                        f"--model-dir \"./models/{identifier}_{mode}/\" "
                        f"--debug"
                    )
                    print(cmd)
                
                print()  # Empty line between architectures
                
    except Exception as e:
        print(f"# Error processing file: {e}")


def generate_batch_script(config_file, output_file="run_reproduction.sh"):
    """Generate a bash script for automated reproduction."""
    try:
        config_path = Path(config_file)
        if not config_path.exists():
            print(f"# Error: File '{config_file}' not found.")
            return

        with open(output_file, 'w') as script:
            script.write("#!/bin/bash\n")
            script.write("# Automated reproduction script for Persistent Stochastic Ablation study\n")
            script.write("# Generated by generate_reproduction_tests.py\n\n")
            
            script.write("set -e  # Exit on any error\n")
            script.write("echo 'Starting reproduction tests...'\n\n")
            
            with open(config_path, 'r') as f:
                for line_num, line in enumerate(f, 1):
                    line = line.strip()
                    if not line or '*' not in line:
                        continue

                    parts = line.split('*')
                    if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():
                        continue

                    layers, width = parts
                    arch = f"[{layers}*{width}]"
                    identifier = f"{layers}x{width}"

                    script.write(f"echo 'Testing architecture: {arch}'\n")
                    
                    for mode in ["none", "decay", "dropout", "full", "hidden", "output"]:
                        script.write(f"echo '  Running {mode} ablation mode...'\n")
                        cmd = (
                            f"poetry run train -- --arch \"{arch}\" "
                            f"--ablation-mode {mode} "
                        )
                        
                        # Add mode-specific parameters
                        if mode == "decay":
                            cmd += f"--weight-decay 1e-4 "
                        elif mode == "dropout":
                            cmd += f"--dropout 0.1 "
                        
                        cmd += (
                            f"--meta-loops 100 "
                            f"--model-dir \"./models/{identifier}_{mode}/\" "
                            f"--debug"
                        )
                        script.write(cmd)
                        script.write("echo '  Completed'\n\n")
                    
                    script.write("echo 'Architecture completed'\n\n")
            
            script.write("echo 'All reproduction tests completed!'\n")
        
        # Make the script executable
        os.chmod(output_file, 0o755)
        print(f"# Generated batch script: {output_file}")
        print(f"# Run with: ./{output_file}")
        
    except Exception as e:
        print(f"# Error generating batch script: {e}")


def main():
    """Main function for Poetry script entry point."""
    # Generate individual commands
    print("=== Individual Commands ===")
    generate_commands("reproduction/configurations.txt")
    
    print("\n" + "="*50 + "\n")
    
    # Generate batch script
    print("=== Batch Script Generation ===")
    generate_batch_script("reproduction/configurations.txt")


if __name__ == "__main__":
    main()